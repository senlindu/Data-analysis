# 通过命令行启动IPython
ipython
# 可以在这里执行任何IPython语句，只需将其输入然后按下回车键就行了
# 如果只是在IPython中输入了一个变量，它将会显示出该对象的一个字符串表示
# 许多Python对象被格式化为可读性更好的形式，与print的普通输出形式有显著区别
# 在shell中输入表达式时，只要按下tab键，当钱命名空间中任何与已输入的字符串相匹配的变量就会被找出来
# 在变量的前面或后面加上一个问号（？）就可以将有关该对象的一些通用信息显示出来。这叫对象内省
# 使用？？还将显示出该函数的源代码
# ？还有一个用法，即搜索IPython命名空间，类似于UNIX或Windows命令行中的用法
# 一些字符再配以通配符（*）即可显示出所有与该通配符表达式相匹配的名称
# %run命令
# 在IPython会话环境中，所有文件都可以通过%run命令当做python程序来运行
# 脚本是在一个空的命名空间中运行的（没有import，也没有定义任何其他的变量）
# 此后，该文件中所定义的全部变量（还有各种import、函数和全局变量）就可以在当前shell中访问了
# 如果Python脚本需要用到命令行参数（通过sys.argv访问），可以将参数放到文件路径的后面，就像在命令行上执行那样
# 代码在执行中，只要按下“Ctrl+c”，就会引发一个keyboardinterrupt
# 多数情况下，可以通过“Ctrl+shift+v”将剪贴板中的代码片段粘贴出来
# 但有可能换行符被处理为<return>
# 使用%paste和%cpaste两个魔术函数
# %paste可以承载剪贴板中的一切文本，并在shell中以整体形式执行
# %cpaste多出一个用于粘贴代码的特殊提示符，在最终执行之前，你想粘贴多少代码就粘贴多少
# 如果想在执行那些粘贴进去的代码之前先检查一番，就可以考虑使用%cpaste
# 如果%run某段脚本或执行某条语句时发生了异常，ipython默然会输出整个调用栈跟踪，
# 其中还会附上调用栈各点附近的几行代码作为上下文参考
# 上下文代码参考的数量可以通过%xmode魔术命令进行控制
# Ipython有一些特殊命令（被称为魔术命令），以百分号%为前提
# 可以用%timeit这个魔术命令检测任意Python语句的执行时间
# 魔术命令默认是可以不带百分号%的，只要没有定义与其同名的变量即可，
# 这个技术叫做automagic,可以通过%automagic打开或关闭
# 
# 
# 基于Qt的富GUI控制台
# IPython开发了一个基于Qt框架的GUI控制台。如果你已经安装了pyQt或PySide，
# 使用下面的命令启动的话即可为其添加绘图功能
# ipython qtconsole --pylab=inline
# 通常通过在启动IPython时加上--pylab标记来集成matplotlib
# 
# 使用命令历史
# IPython维护者一个位于硬盘上的小型数据库，其中含有你执行过的每条命令的文本
# 使用ctrl+p或上键向上搜索历史命令，Ctrl+n或下键向下搜索
# Ctrl+R用于实现部分增量搜索，按下后，输入你想搜索行中的几个字符
# 
# 
# 输入和输出变量
# 最近的两个输出结果分别保存在_和__变量中
# 输入的文本被保存在名为_iX的变量中，其中X表示的输入行的行号
# 每个输入变量都有一个对应的输出变量_X
# 由于输入变量是字符串，因此可以用Python的exec关键字重新执行
# %hint用于打印全部或部分输入历史，可以选择是否带行号
# %reset用于情况interactive命名空间，并可选择是否清空输入和输出缓存
# %xdel用于从IPython系统中移除特定对象的一切引用
# 
# 
# 记录输入和输出
# IPython能够记录整个控制台会话，包括输入和输出
# 执行%logstart即可开始记录日志
# 
# 
# 与操作系统交互
# 