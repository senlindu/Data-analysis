

# HTTP标准
# HTTP请求过程
# HTTP协议采取的是请求响应模型，HTTP协议永远都是客户端发起请求，服务器回送响应
# HTTP协议是一个无状态的协议，同一个客户端的这次请求和上次请求没有对应关系，一个
# HTTP操作称为一个事务，其执行分为四步
# 1.客户端与服务器需要建立连接
# 2、家里连接后，客户端发送一个请求给服务器，请求格式为:统一资源标识符(URL),
# 协议版本号，后面是MIME信息，包括请求修饰符、客户机信息和可能内容
# 3、服务器接到请求后，给予相应的响应信息，其格式为一个状态行，包括信息的协议版本号，
# 一个成功或错误的代码，后面是MIME信息，包括服务器信息、实体信息和可能的内容
# 4、客户端接受服务器所返回的信息，通过浏览器将信息显示在用户的显示屏上，然后客户端与
# 服务器断开连接

# HTTP状态码含义
# 常见的HTTP状态码：
# 200-请求成功
# 301-资源(网页)被永久转移到其他URL
# 404-请求的资源不存在
# 500-内部服务器错误
# HTTP状态码.png

# HTTP头部信息
# 由众多的头域组成，每个头域由一个域名、冒号(:)和域值三部分构成
# 请求头的数据：
# HTML请求头_1.png
# HTML请求头_2.png
# 响应头：
# HTML响应头_1.png
# HTML响应头_2.png
# HTTP消息报头主要包括普通报头、请求报头、响应报头、实体报头
# 1、普通报头，有少数报头域用于所有的请求和响应消息，但并不用于被传输的实体，只用于传输的消息
# 2、请求报头允许客户端向服务器端传递请求的附加信息以及客户自身的信息
# 3、响应报头允许服务器传递不能放在状态行中的附加响应信息，以及关于服务器的信息和对
# Request-URI所标识的资源进行下一步访问的信息
# 4、请求和响应消息都可以传送一个实体。一个实体由实体报头域和实体正文组成，但可以只发送实体
# 报头域。实体报头域定义了关于实体正文和请求所标识的资源的元信息
# 普通-请求报头.png
# 响应-实体报头.png

# Cookie状态管理
# Cookie和Session都用来保存状态信息，都是保存客户端状态的机制，都为了解决HTTP无状态的
# 问题所做的努力。
# Cookie将状态保存在客户端，Session将状态保存在服务器端
# Cookie是服务器在本地机器上存储的小段文本并随每一个请求发送至同一个服务器
# Cookie的工作方式：服务器给每个Session分配一个唯一的JSESSIONID，并通过Cookie发送给
# 客户端。当客户端发起新的请求的时候，将在Cookie头中携带这个JSESSIONID，这样服务器就能
# 找到这个客户端对应的session

# HTTP请求方式
# GET
# POST
# HEAD
# PUT
# DELETE
# OPTIONS
# TRACE
# CONNECT
# 最常用的是GET和POST
# GET-POST.png
# 